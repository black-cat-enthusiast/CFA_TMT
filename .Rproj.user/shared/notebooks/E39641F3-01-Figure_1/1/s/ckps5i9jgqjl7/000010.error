{"frames":[{"func":"data %>% filter(CFA != \"CFA_1D\") %>% filter(PGE2 != \"PGE2\") %>% \n    filter(Behavior == \"freeze\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(., Behavior == \"freeze\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(., PGE2 != \"PGE2\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(., CFA != \"CFA_1D\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter.data.frame(., CFA != \"CFA_1D\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter(.df, ..., .by = {\n    {\n        .by\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"filter.tidytable(.df, ..., .by = {\n    {\n        .by\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval_tidy(dt_expr, .df, dt_env)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(~.df)[CFA != \"CFA_1D\"]","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"`[.data.table`(~.df, CFA != \"CFA_1D\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatch(eval(.massagei(isub), x, ienv), dt_invalid_let_error = function(e) stopf(\"Operator := detected in i, the first argument inside DT[...], but is only valid in the second argument, j. Most often, this happens when forgetting the first comma (e.g. DT[newvar := 5] instead of DT[ , new_var := 5]). Please double-check the syntax. Run traceback(), and debugger() to get a line number.\"), \n    error = function(e) .checkTypos(e, names_x))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchList(expr, classes, parentenv, handlers)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"tryCatchOne(tryCatchList(expr, names[-nh], parentenv, handlers[-nh]), \n    names[nh], parentenv, handlers[[nh]])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"value[[3L]](cond)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".checkTypos(e, names_x)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stopf(\"Object '%s' not found amongst %s\", used, brackify(ref))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"raise_condition(stop, gettextf(fmt, ..., domain = domain), c(class, \n    \"simpleError\", \"error\", \"condition\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal(obj)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in .checkTypos(e, names_x) : \n  Object 'CFA' not found amongst [ID, Behavior, Start, Stop, Duration, dum, Start_clean, Stop_clean, Condition]\n"}